;;-*-Lisp-*-
(in-package goal)

;; name: localmulti.gc
;; name in dgo: main
;; dgos: GAME, ENGINE


(defun start2 ()
  (process-spawn
                target
               :init init-target
                (-> *game-info* current-continue)
                :from *target-dead-pool*
                :to *target-pool*
                :stack *kernel-dram-stack*
                )
  )

(defun start3 ()
  (process-spawn
                target
               :init init-target
                (-> *game-info* current-continue)
                :from *target-dead-pool*
                :to *target-pool*
                :stack *kernel-dram-stack*
                )
  )


(defun start4 ()
  (process-spawn
                target
               :init init-target
                (-> *game-info* current-continue)
                :from *target-dead-pool*
                :to *target-pool*
                :stack *kernel-dram-stack*
                )
  )

(define *target2* (the-as target #f))
(define *target3* (the-as target #f))
(define *target4* (the-as target #f))

;;These return true if the specified target is currently "alive".
(defun target2-alive? () (not (or (= (-> *target2* state) #f) (= (-> *target2* state) symbol))))
(defun target3-alive? () (not (or (= (-> *target3* state) #f) (= (-> *target3* state) symbol))))
(defun target4-alive? () (not (or (= (-> *target4* state) #f) (= (-> *target4* state) symbol))))
(defun extra-target-alive? () (or (target2-alive?)(target3-alive?)(target4-alive?)))

(defun warp-jakA-to-jakB ((jakA target) (jakB target))
      (set! (-> (-> jakA root) trans x) (-> (-> jakB root) trans x))
      (set! (-> (-> jakA root) trans y) (-> (-> jakB root) trans y))
      (set! (-> (-> jakA root) trans z) (-> (-> jakB root) trans z))
)

(defun check-multi-jak-dist ((jak target))
  (define xyz-dist 0.0)
  (define  xz-dist 0.0)
  (define   y-dist 0.0)
  (define j-vec (new 'static 'vector))
  
  (set! (-> j-vec x) (-> (-> jak root) trans x))
  (set! (-> j-vec y) (-> (-> jak root) trans y))
  (set! (-> j-vec z) (-> (-> jak root) trans z))

  (set! xyz-dist (vector-vector-distance j-vec (target-pos 0)) )
  (set!  xz-dist (vector-vector-xz-distance j-vec (target-pos 0)) )
  (set!   y-dist (- (-> (target-pos 0) y) (-> j-vec y)) )

  (> xyz-dist (meters 55.0))
)

(defun localmulti-run-eachframe()

;;If the camera is not focus on the main target (id 1375524), then set the cameras focus to the  main target.
;;todo this breaks pelican cutscene we can easily fix later.
(if (and (not (= (-> *camera* drawable-target ) 1375524)) (extra-target-alive?))(set! (-> *camera* drawable-target) (the handle 1375524)))

;;If the camera is not set to cam-stick and we have more than one jak, then set it to cam-stick
;;Todo fix allow camera zooming with triangle.
;;This make the spawning in process MUCH better
;;Not sure at this time if we want to move forward with this and fix it, or solve it another way...
(if (and  (= (-> (-> (-> (the-as (pointer camera-slave) (-> *camera* child)))state)name) 'cam-string) (extra-target-alive?))(begin (send-event *camera* 'change-state cam-stick 0)))


  (if (and (target2-alive?) (check-multi-jak-dist *target2*))
    (warp-jakA-to-jakB *target2* *target*)
  )
  (if (and (target3-alive?) (check-multi-jak-dist *target3*))
    (warp-jakA-to-jakB *target3* *target*)
  )
  (if (and (target4-alive?) (check-multi-jak-dist *target4*))
    (warp-jakA-to-jakB *target4* *target*)
  )
  (none)
  )

(defun draw-xyz ((jak target) (x float) (y float) (z float))
  (set! (-> jak draw color-mult x) x)
  (set! (-> jak draw color-mult y) y)
  (set! (-> jak draw color-mult z) z)
)
(defun draw-normal ((jak target))
  (draw-xyz jak 1.0 1.0 1.0)
)
(defun draw-white ((jak target))
  (draw-xyz jak 10.0 10.0 10.0)
)
(defun draw-black ((jak target))
  (draw-xyz jak 0.0 0.0 0.0)
)
(defun draw-red ((jak target))
  (draw-xyz jak 3.0 0.0 0.0)
)
(defun draw-green ((jak target))
  (draw-xyz jak 0.0 3.0 0.0)
)
(defun draw-blue ((jak target))
  (draw-xyz jak 0.0 0.0 3.0)
)
(defun draw-yellow ((jak target))
  (draw-xyz jak 3.0 3.0 0.0)
)
(defun draw-pink ((jak target))
  (draw-xyz jak 3.0 0.0 3.0)
)
(defun draw-light-blue ((jak target))
  (draw-xyz jak 0.0 3.0 3.0)
)


(defun localmulti2-start ()
  (when (not (target2-alive?))
    (define *target2* (-> (start2) 0))
    (draw-green *target2*)
    (set! (-> *target2* control unknown-cpad-info00) (-> *cpad-list* cpads 1))
  )
  (send-event *camera* 'change-target *target*)
  (none)
)

(defun localmulti3-start ()
  (when (not (target3-alive?))
    (define *target3* (-> (start3) 0))
    (draw-blue *target3*)
    (set! (-> *target3* control unknown-cpad-info00) (-> *cpad-list* cpads 2))
  )
  (send-event *camera* 'change-target *target*)
  (none)
)

(defun localmulti4-start ()
  (when (not (target4-alive?))
    (define *target4* (-> (start4) 0))
    (draw-pink *target4*)
    (set! (-> *target4* control unknown-cpad-info00) (-> *cpad-list* cpads 3))
  )
  (send-event *camera* 'change-target *target*)
  (none)
)

(defun spawn-extra-targets-code()
  ;;Multiplayer stuff to clean and move
 (when (and (cpad-hold? 1 l3)
             (or *cheat-mode* (= *kernel-boot-message* 'play)) ;; not in demo
             )
(check-cheat-code (-> *cheat-temp* 1) 1
        (up up down down left right left right x x square circle square circle)
          (cpad-clear! 1 r1)
          ;; toggle!
        
          (cheats-sound-play *cheat-mode*)
          (localmulti2-start)
        )
 )
  (when (and (cpad-hold? 2 l3)
             (or *cheat-mode* (= *kernel-boot-message* 'play)) ;; not in demo
             )
(check-cheat-code (-> *cheat-temp* 2) 2
        (up up down down left right left right x x square circle square circle)
          (cpad-clear! 2 r1)
          ;; toggle!
        
          (cheats-sound-play *cheat-mode*)
          (localmulti3-start)
        )
 )
  (when (and (cpad-hold? 3 l3)
             (or *cheat-mode* (= *kernel-boot-message* 'play)) ;; not in demo
             )
(check-cheat-code (-> *cheat-temp* 3) 3
        (up up down down left right left right x x square circle square circle)
          (cpad-clear! 3 r1)
          ;; toggle!
        
          (cheats-sound-play *cheat-mode*)
          (localmulti4-start)
        )
 )
 ;; back to normal main.gc code.)
 (none))
