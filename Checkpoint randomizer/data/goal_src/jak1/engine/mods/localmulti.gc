;;-*-Lisp-*-
(in-package goal)

;; name: localmulti.gc
;; name in dgo: main
;; dgos: GAME, ENGINE


(defun start2 ()
  (process-spawn
                target
               :init init-target
                (-> *game-info* current-continue)
                :from *target-dead-pool*
                :to *target-pool*
                :stack *kernel-dram-stack*
                )
  )

(defun start3 ()
  (process-spawn
                target
               :init init-target
                (-> *game-info* current-continue)
                :from *target-dead-pool*
                :to *target-pool*
                :stack *kernel-dram-stack*
                )
  )


(defun start4 ()
  (process-spawn
                target
               :init init-target
                (-> *game-info* current-continue)
                :from *target-dead-pool*
                :to *target-pool*
                :stack *kernel-dram-stack*
                )
  )

(define-extern *target2* target)
(define-extern *target3* target)
(define-extern *target4* target)
(define jakCount 1)

(defun warp-jakA-to-jakB ((jakA target) (jakB target))
      (set! (-> (-> jakA root) trans x) (-> (-> jakB root) trans x))
      (set! (-> (-> jakA root) trans y) (-> (-> jakB root) trans y))
      (set! (-> (-> jakA root) trans z) (-> (-> jakB root) trans z))
)

(defun check-multi-jak-dist ((jak target))
  (define xyz-dist 0.0)
  (define  xz-dist 0.0)
  (define   y-dist 0.0)
  (define j-vec (new 'static 'vector))
  
  (set! (-> j-vec x) (-> (-> jak root) trans x))
  (set! (-> j-vec y) (-> (-> jak root) trans y))
  (set! (-> j-vec z) (-> (-> jak root) trans z))

  (set! xyz-dist (vector-vector-distance j-vec (target-pos 0)) )
  (set!  xz-dist (vector-vector-xz-distance j-vec (target-pos 0)) )
  (set!   y-dist (- (-> (target-pos 0) y) (-> j-vec y)) )

  (> xyz-dist (meters 55.0))
)

(defun localmulti-run-eachframe()

;;If the camera is not focus on the main target (id 1375524), then set the cameras focus to the  main target.
;;todo this breaks pelican cutscene we can easily fix later.
(if (and (not (= (-> *camera* drawable-target ) 1375524)) (> jakCount 1))(set! (-> *camera* drawable-target) (the handle 1375524)))

;;If the camera is not set to cam-stick and we have more than one jak, then set it to cam-stick
;;Todo fix allow camera zooming with triangle.
;;This make the spawning in process MUCH better
;;Not sure at this time if we want to move forward with this and fix it, or solve it another way...
(if (and (not (= (-> (-> (-> (the-as (pointer camera-slave) (-> *camera* child)))state)name) 'cam-stick)) (> jakCount 1))(begin (send-event *camera* 'change-state cam-stick 0)))


  (if (and (> jakCount 1) (check-multi-jak-dist *target2*))
    (warp-jakA-to-jakB *target2* *target*)
  )
  (if (and (> jakCount 2) (check-multi-jak-dist *target3*))
    (warp-jakA-to-jakB *target3* *target*)
  )
  (if (and (> jakCount 3) (check-multi-jak-dist *target4*))
    (warp-jakA-to-jakB *target4* *target*)
  )
  (none)
  )


(defun localmulti2-start ()
  (when (< jakCount 2)
    (define *target2* (-> (start2) 0))
    (set! jakCount 2)
    (set! (-> *target2* draw color-mult x) (set! (-> *target2* draw color-mult y) -23.1))
    (set! (-> *target2* control unknown-cpad-info00) (-> *cpad-list* cpads 1))
  )
  (send-event *camera* 'change-target *target*)
)

(defun localmulti3-start ()
  (when (< jakCount 3)
    (localmulti2-start)

    (define *target3* (-> (start3) 0))
    (set! jakCount 3)
    (set! (-> *target2* draw color-mult x) (set! (-> *target2* draw color-mult y) 13.1))
    (set! (-> *target3* control unknown-cpad-info00) (-> *cpad-list* cpads 2))
  )
  (send-event *camera* 'change-target *target*)
)

(defun localmulti4-start ()
  (when (< jakCount 4)
    (localmulti3-start)

    (define *target4* (-> (start4) 0))
    (set! jakCount 4)
    (set! (-> *target2* draw color-mult x) (set! (-> *target2* draw color-mult y) 123.1))
    (set! (-> *target4* control unknown-cpad-info00) (-> *cpad-list* cpads 3))
  )
  (send-event *camera* 'change-target *target*)
)
